#!/usr/bin/env bash
# """`Keepassxc-cli` wrapper to ease the of CLI for database unlocked with key file.
#
# SYNOPSIS:
#
#   keepass.sh command [options]
#
# DESCRIPTION:
#
#   THIS WRAPPER REQUIRES ENVIRONMENT VARIABLE `KEEPASS_DB` AND
#   `KEEPASS_KEYFILE` TO BE SET. IT IS RECOMMENDED TO USE IT WITH
#   [DIRENV](https://direnv.net).
#
#   The wrapper allow to use most `keepassxc-cli` command without requiring to
#   provide the `--no-password`, `--key-file <path>` or the keepass database
#   path as these information are stored with environment variables:
#
#   | Variables         | Description                                                    |
#   | :---------------: | :------------------------------------------------------------- |
#   | `KEEPASS_DB`      | Path to a keepass database, that must be unlocked by a keyfile |
#   | `KEEPASS_KEYFILE` | Path to a keyfile unlocking the keepass database               |
#   | `KEEPASS_YUBIKEY` | Yubikey slot to use                                            |
#
#   `keepassxc-cli` is the command line interface for the KeePassXC password
#   manager. It provides the abil‐ ity to query and modify the entries of a
#   KeePass database, directly from the command line.

# shellcheck disable=SC2034
SCRIPTPATH="$(
  cd -- "$(dirname "$0")" >/dev/null 2>&1 || exit 1
  pwd -P
)"
SCRIPTNAME="$(basename "$0")"
set -e

init_logger() {
  local log_file="${XDG_CACHE_HOME:-${HOME}/.cache}/snippets/_log.sh"
  local last_download_file="/tmp/_log.time"
  local delai=14400 # 4 hours
  # shellcheck disable=SC2155
  local curr_time=$(date +%s)
  local time="$((curr_time - $(cat "${last_download_file}" 2>/dev/null || echo "0")))"

  if ! [[ -f "${log_file}" ]] ||
    { [[ -f "${log_file}" ]] && [[ "${time}" -gt "${delai}" ]]; }; then
    if ping -q -c 1 framagit.org &>/dev/null; then
      # shellcheck disable=SC1090
      source <(curl -s https://framagit.org/-/snippets/7183/raw/main/_get_log.sh)
      echo "${curr_time}" >"${last_download_file}"
    else
      echo -e "\033[1;33m[WARNING]\033[0;33m Unable to get last logger version, will use \`echo\`.\033[0m"
      _log() {
        # shellcheck disable=SC2317
        echo "$@"
      }
    fi
  else
    # shellcheck disable=SC1090
    source <(cat "${log_file}")
  fi
}

main() {
  export DEBUG_LEVEL="${DEBUG_LEVEL:-INFO}"
  init_logger

  # Variable storing actions and command to execute
  local action="$1"
  # Compute the command to execute and execute it
  local cmd="keepassxc-cli ${action} --no-password"

  # Remove action from arguments
  shift

  # Ensure required variables are set and action is valid
  if [[ -z ${KEEPASS_DB} ]]; then
    _log "ERROR" "Variable **\`KEEPASS_KEYFILE\`** must be set to continue!"
    return 1
  elif [[ -n "${KEEPASS_DB}" && ! -f "${KEEPASS_DB}" ]]; then
    _log "ERROR" "File specified with variable **\`KEEPASS_DB\`** must exists to continue!"
    return 2
  fi

  if [[ -z "${KEEPASS_KEYFILE}" && -z "${KEEPASS_YUBIKEY}" ]]; then
    _log "ERROR" "Variable at least one of following variables must be set:"
    _log "ERROR" " * **\`KEEPASS_KEYFILE\`**"
    _log "ERROR" " * **\`KEEPASS_YUBIKEY\`**"
    return 1
  fi

  if [[ -n "${KEEPASS_KEYFILE}" ]]; then
    if ! [[ -f "${KEEPASS_KEYFILE}" ]]; then
      _log "ERROR" "File specified with variable **\`KEEPASS_KEYFILE\`** must exists to continue!"
      return 2
    else
      cmd+=" -k '${KEEPASS_KEYFILE}'"
    fi
  fi

  if [[ -n "${KEEPASS_YUBIKEY}" ]]; then
    cmd+=" -y '${KEEPASS_YUBIKEY}'"
  fi

  if [[ "${action}" =~ (exit|quit|close|open) ]]; then
    _log "ERROR" "Command **${action}** is not supported !"
    return 4
  fi

  cmd+=" '${KEEPASS_DB}' $*"

  local log_dir="/tmp/kp/${USER}"
  local log_file="${log_dir}/kp.log"
  local lock_file="${log_dir}/kp.lock"
  if ! [[ -d "${log_dir}" ]]; then
    mkdir -p "${log_dir}"
  fi

  while [[ -f "${lock_file}" ]]; do
    sleep 2

    # If lock file is older than 2 minutes
    if [[ -f "${lock_file}" ]]; then
      date="$(date '+%s')"
      lock="$(cat "${lock_file}")"
      diff="$((date - ${lock:-${date}}))"
      if [[ -n "${diff}" ]] && [[ "${diff}" -gt 5 ]]; then
        rm "${lock_file}"
      fi
    fi
  done

  # Compute the command to execute and execute it
  local found=false
  local timeout=4
  local timeoutDate=$(($(date +%s) + timeout))
  date '+%s' >"${lock_file}"
  while [[ "$(date +%s)" -lt ${timeoutDate} ]] && [[ "${found}" == "false" ]]; do
    # Execute command and store STDOUT and STDERR
    {
      IFS=$'\n' read -r -d '' STDERR
      IFS=$'\n' read -r -d '' STDOUT
    } < <((printf '\0%s\0' "$(eval "${cmd}")" 1>&2) 2>&1)
    # shellcheck disable=SC2181
    if [[ -n "${STDERR}" ]]; then
      cat <<EOM >>"${log_file}"
$(date): COMMAND
$(date): ${cmd}
$(date): STDERR
$(date): ${STDERR}
EOM
      sleep 1
    else
      found=true
    fi
  done
  rm "${lock_file}"

  if [[ "${found}" == "false" ]]; then
    _log "ERROR" "Unable to access to DB, see ${log_file}"
    return 4
  fi

  # If output of command is empty
  if [[ -z "${STDOUT}" ]]; then
    _log "INFO" "Output of \`$*\` is empty."
    return 4
  fi
  echo "${STDOUT}"
  return 0
}

main "$@"
